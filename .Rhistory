install.packages("UsingR")
mtcars
quit
library(UsingR)
mtcars
q()
add<-function(x,y){
x+y
}
add(3,5)
above10<-function(x){
use <- x > 10
x[use]
}
above<-function(x,n){
use <- x > n
x[use]
}
x<-1:10
above(7)
above(x,7)
x[x(x>7)]
x[x[x>7]
]
columnmean <-function(y){
nc<-ncol(y)
means<-numeric(nc) #inicia un vector numérico
for (i in 1:nc){
means[i]<-mean(y[,i])
}
means
}
columnmean(airquality)
columnmean <-function(y,removeNA=T){
nc<-ncol(y)
means<-numeric(nc) #inicia un vector numérico
for (i in 1:nc){
means[i]<-mean(y[,i],na.rm=removeNA)
}
means
}
columnmean(airquality)
search()
cube <- function(x, n) {
x^3
}
cube(3)
n
x <- 1:10
if(x > 5) {
x <- 0
}
?parentenv()
?parent.env()
?parent.env(cube)
parent.env(cube)
cube(3)
parent.env('cube')
parent.env()
enviroment(cube)
environment(cube)
install.packages("knitr")
knitr
knitr()
mtcars
```{r fig.width=7, fig.height=6}
You can also embed plots, for example:
This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages (click the **Help** toolbar button for more details on using R Markdown).
clc
file.edit(".Rprofile")
mtcars
lm(mtcars$mpg~factor(mtcars$am))
mean(mtcars$mpg)
mean(mtcars$mpg[mtcars$am==1])
mean(mtcars$mpg[mtcars$am==0])
?mtcars
cars
corr(1,1)
cor(1,1)
cor(1:3,1:3)
cor(mtcars$mpg,mtcars$am)
cor(mtcars$mpg,factor(mtcars$am)
)
cor(mtcars$mpg,factor(mtcars$am))
cor(mtcars$mpg,mtcars$am)
plot(mtcars$mpg,factor(mtcars$am))
plot(factor(mtcars$am),mtcars$mpg)
plot(mtcars$am,mtcars$mpg)
par(mfrow=c(2,2))
plot(mtcars$am,mtcars$mpg)
plot(factor(mtcars$am),mtcars$mpg)
plot(factor(mtcars$am),mtcars$mpg)
plot(factor(mtcars$am),mtcars$mpg)
par(mfrow=c(2,1))
par(mfrow=c(2,1))
plot(mtcars$am,mtcars$mpg)
plot(factor(mtcars$am),mtcars$mpg)
par(mfrow=c(1,2))
plot(factor(mtcars$am),mtcars$mpg)
plot(mtcars$am,mtcars$mpg)
std(1:3)
var(1:3)
sqrt(var(1:3))
sqrt(var(1:10))
sd(mtcars$mpg[mtcars$am==0])
sd(mtcars$mpg[mtcars$am==1])
prom(1)=1
prom=1
prom(1)=1
prom[1]=1
prom[2]=1
prom
prom=1:3
prom
promedios=c(mean(mtcars$mpg[mtcars$am==0]),mean(mtcars$mpg[mtcars$am==1]) #means
)
promedios
?qnorm
qnorm(5,5,1)
qnorm(5,6,1)
qnorm(.5,6,1)
qt(.5,6,1)
?qt
qt(0.05,1)
qt(0.025,1)
qt(0.025,1)
qt(0.025,1,F)
qt(1-0.025,1,F)
t
?t
?tval
prom
rm(list=ls())
prom
mtcars$mpg[mtcars$am=1]
mtcars$mpg[mtcars$am==1]
length(mtcars$mpg[mtcars$am==1])
largo=c(length(mtcars$mpg[mtcars$am==0]),length(mtcars$mpg[mtcars$am==1]))
largo
largo[1]
largo[2]
tval=c(qt(1-0.025,largo[1],F),qt(1-0.025,largo[2]),F))
tval=c(qt(1-0.025,largo[1],F))
tval
tval=c(qt(1-0.025,largo[1],F),qt(1-0.025,largo[2]),F)
tval
tval=c(qt(1-0.025,largo[1],F),qt(1-0.025,largo[2]),F))
tval=c(1,2)
qt(1-0.025,largo[1],F)
qt(1-0.025,largo[2],F)
tval=c(qt(1-0.025,largo[1],F),qt(1-0.025,largo[2],F))
tval
t.test(mtcars$mpg ~ factor(mtcars$am), data = mtcars)
t.test(mtcars$mpg ~ factor(mtcars$am))
resumen<-t.test(mtcars$mpg ~ factor(mtcars$am))
resumen
resumen.1
resumen.df
names(resumen)
resumen.statistic
resumen$statistic
resumen$parameter
resumen$p.value
resumen$conf.int
names(resumen$conf.int)
resumen$estimate
data.frame<-(1,2)
data.frame<-(1)
data.frame<-(1,name="numero")
data.frame<-(1,names="numero")
data.frame(1,names="numero")
data.frame(1,names="numero")
c(mean(mtcars$mpg[mtcars$am==0]),mean(mtcars$mpg[mtcars$am==1]))
data.frame(mean(mtcars$mpg[mtcars$am==0]),mean(mtcars$mpg[mtcars$am==1]))
data.frame(mean(mtcars$mpg[mtcars$am==0]),mean(mtcars$mpg[mtcars$am==1]),names=c("a","m"))
1+2,3
1+2
1+2;3
Auto<-mean(mtcars$mpg[mtcars$am==0];Manual<-mean(mtcars$mpg[mtcars$am==1])
Auto<-mean(mtcars$mpg[mtcars$am==0]);Manual<-mean(mtcars$mpg[mtcars$am==1])
data.frame(Auto,Manual)
prueba<-t.test(mtcars$mpg ~ factor(mtcars$am))
prueba
names(prueba)
prueba[1]
prueba[2]
prueba[1:10]
names(prueba)
names(prueba[1])
data.frame(prueba[1],names=names(pruebas[1]))
data.frame(prueba[1],names=names(prueba[1]))
data.frame(prueba[1])
data.frame(prueba[1:3])
data.frame(prueba[1:10])
data.frame(prueba[1:9])
data.frame(prueba[1])
data.frame(prueba[2])
data.frame(prueba[3])
data.frame(prueba[4])
data.frame(prueba[c(1,3)]
)
min
Min
?lm
ajuste
ajuste <- lm(mtcars$mpg ~ factor(mtcars$am))
ajuste
names(ajuste)
ajuste[1]
ajuste$coefficients
ajuste$coefficients[1]
ajuste$coefficients[2]
Intercept
paste(c(1,2),3)
paste(c(1,2,'A')
)
paste(1,2,3,'A')
paste(1,2,3,'A',sep="")
cov(mtcars$mpg,mtcars$am)
cov(mtcars$mpg,factor(mtcars$am)
)
cov(mtcars$mpg,factor(mtcars$am))
cov(mtcars$mpg,mtcars$am)
ajuste
ajuste
summary(ajuste)
?lm
names(ajuste)
ajuste[1:13]
ajuste[1]
ajuste[2]
ajuste[3]
ajuste[4]
ajuste[5]
ajuste[6]
ajuste[7]
anova(ajuste)
var(ajuste$residuals)
1-var(mtcars$mpg)/var(ajuste$residuals)
var(mtcars$mpg)
summary(ajuste)
manes(summary(ajuste))
names(summary(ajuste))
summary(ajuste)$coefficients
summary(ajuste)$r.squared
summary(ajuste)$adj.r.squared
summary(ajuste)$fstatistic
cov(mtcars)
cov(mtcars)
cor(mtcars)
max(cormtcars)
max(cor(mtcars)
)
max(cor(mtcars[1:10]))
mtcars$1
mtcars[1]
cor(mtcars)[1]
cor(mtcars)[1,]
cor(mtcars)[1]
cor(mtcars)[1,]
?mtcars
cor(mtcars)[1,]
mtcars
plot(mtcars[1],mtcars[9])
plot(mtcars[1,],mtcars[9,])
plot(mtcars$mpg,mtcars$am)
plot(mtcars$am,mtcars$mpg)
plot(mtcars$cyl,mtcars$mpg)
cor(mtcars)[16,]
cor(mtcars)[6,]
plot(mtcars$wt,mtcars$mpg)
lm(mtcars$mpg ~ mtcars$wt[mtcars$am==1])
mtcars$am==1
mtcars$wt
mtcars$wt[mtcars$am==1]
lm(mtcars$mpg~mtcars$wt[mtcars$am==1])
bloqueo1<-mtcars$wt[mtcars$am==1]
lm(mtcars$mpg~bloqueo1)
lm(mtcars$mpg[mtcars$am==1]~mtcars$wt[mtcars$am==1])
plot(mtcars$mpg[mtcars$am==1],mtcars$wt[mtcars$am==1])
plot(mtcars$mpg[mtcars$am==0],mtcars$wt[mtcars$am==0])
names(summary(ajuste))
ajuste <- lm(mtcars$mpg ~ factor(mtcars$am));
names(summary(ajuste))
names(ajuste)
plot(mtcars$mpg,ajuste.fitted.values)
plot(mtcars$mpg,ajuste.fitted.values))
plot(mtcars$mpg,ajuste$fitted.values))
plot(mtcars$mpg,ajuste$fitted.values)
plot(ajuste$fitted.values)
plot(mtcars$am,ajuste$fitted.values)
plot(mtcars$mpg,ajuste$fitted.values)
plot(ajuste$fitted.values,mtcars$mpg)
plot(ajuste$fitted.values,mtcars$mpg,mtcars$am,mtcars$mpg)
plot(ajuste)
plot(ajuste)
plot(ajuste)
plot(ajuste$fitted.values)
plot(mtcars$mpg[mtcars$am==1],mtcars$wt[mtcars$am==1])
plot(mtcars$mpg[mtcars$am==],mtcars$wt[mtcars$am==0])
plot(mtcars$mpg[mtcars$am==0],mtcars$wt[mtcars$am==0])
plot(mtcars$mpg[mtcars$am==0],mtcars$wt[mtcars$am==0])
?mtcars
ajuste <- lm(mtcars$mpg ~ factor(mtcars$am));summary(ajuste)[c(4,8,9,10)]
names(summary(ajuste))
plot(ajuste)
plot(ajuste[3])
plot(ajuste$residuals)
names(plot(ajuste))
plot(ajuste$residuals)
ajuste$residuals
qplot(ajuste$residuals)
qnorm(ajuste$residuals)
qqnorm(ajuste)
qqnorm(ajuste$residuals)
qline(ajuste$residuals)
qqline(ajuste$residuals)
ajuste2 <- lm(mtcars$mpg ~ factor(mtcars$am)+mtcars$wt)
qqline(ajuste2$residuals)
qqnorm(ajuste2$residuals)
qqline(ajuste2$residuals)
qqline(ajuste2$residuals,main="line")
qqline(ajuste2$residuals,main="line")
qnorm(ajuste2$residuals,main="line")
qqnorm(ajuste2$residuals,main="line")
qqnorm(ajuste2$residuals,)
?mtcars
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
library(xlsx)
if (Sys.getenv("JAVA_HOME")!="")
Sys.setenv(JAVA_HOME="")
library(rJava)
library(rJava)
install.packages("rJava")
library(rJava)
install.packages('rJava', .libPaths()[1], 'http://www.rforge.net/')
install.packages('rJava',,'http://www.rforge.net/')
Sys.getenv("JAVA_HOME")
library(rJava)
library(xml)
install.packages("xml")
install.packages("XML")
library(XML)
#rootNode<-xmlRoot(doc)
doc
library(XML)
fileUrl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc<-xmlTreePArse(fileUrl,useInternal=T)
doc<-xmlTreeParse(fileUrl,useInternal=T)
doc<-xmlTreeParse("getdata-data-restaurants.xml",useInternal=T)
?mean
?mean
q1data1
q1data1<-read.table("q1.csv",sep=",",header=T)
DT[mean(q1data1$VAL)]
mean(q1data1$VAL)
mean(q1data1,by=q1data$VAL)
names(q1data1)
mean(q1data1,by=q1data$RT)
q1data$RT
q1data1$RT
q1data1$NP
mean(q1data1,by=q1data1$NP)
mean(q1data1$VAL,by=q1data1$NP)
help tapply
?tapply
con=url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode=readLines(con)
nchar(htmlCode)
setwd("C:/Users/TheNtBk/SkyDrive/Cursos/GetingCleaningData/PA1")
datos<-crudos[complete.cases(crudos),]
#Peer assesment 1 Getting and cleaning data
rm(list=ls()) #cleaning vars
cat("\014")  #clear screen
## LOADING DATA
crudos<-read.table("activity.csv",sep=",",header=T) #names steps date interval
## SELECTING VALID DATA (non na data)
datos<-crudos[complete.cases(crudos),]
## DAY ANALYSIS
# Grouping data per day
A<-1;AA<-1;AAA<-1;fechas<-datos$date[datos$interval==0]
for (i in 1:max(as.numeric(datos$date))) {
A[i]<-mean(datos$steps[as.numeric(datos$date)==i])
AA[i]<-sum(datos$steps[as.numeric(datos$date)==i])
AAA[i]<-median(datos$steps[as.numeric(datos$date)==i])
}
# Total, mean and median of steps per day
DD<-data.frame(steps=AA[AA!=0],mean=A[AA!=0],median=AAA[AA!=0],date=as.Date(fechas))
# histogram of total
hist(DD$steps)
#mean and median per day
data.frame(mean=DD$mean,median=DD$median,date=as.Date(fechas))
## INTERVAL ANALYSIS
#Grouping dat per interval
B<-1;BB<-1;BBB<-1;intervalos<-datos$interval[as.numeric(datos$date)==2]
for (i in 1:length(intervalos)){
B[i]<-sum(datos$steps[datos$interval==intervalos[i]])
BB[i]<-mean(datos$steps[datos$interval==intervalos[i]])
BBB[i]<-median(datos$steps[datos$interval==intervalos[i]])
}
# Total, mean and median of steps per interval
ID<-data.frame(steps=B,mean=BB,median=BBB,interval=intervalos)
#Plot steps per interval
plot(ID$interval,ID$mean)
#Interval with max average steps
ID[ID$mean==max(ID$mean),]
##MISSING DATA
#Number of NA
NANumber<-length(crudos$steps[is.na(crudos$steps)])
#Replacing the NA values (for the mean of the interval)
RD<-crudos;temp<-0
for (i in 1:length(RD$steps)){
if(is.na(RD$steps[i])) {RD$steps[i]<-ID$mean[ID$interval==RD$interval[i]]}
}
#Grouping NEW data per day
AR<-1;AAR<-1;AAAR<-1; fechasR<-as.Date(RD$date[RD$interval==0])
for (i in 1:length(fechasR)) {
AR[i]<-sum(RD$steps[as.numeric(RD$date)==i])
AAR[i]<-mean(RD$steps[as.numeric(RD$date)==i])
AAAR[i]<-median(RD$steps[as.numeric(RD$date)==i])
}
# Total, mean and median of steps per day, with replaced data
RDD<-data.frame(steps=AR[AR!=0],mean=AAR[AR!=0],median=AAAR[AR!=0], date=as.Date(fechasR))
#Histogram
hist(RDD$steps)
##WEEK WEEKEND PATTERN (in revised data)
# Creating two levels variable with week and weekend days
days<-as.factor(c("weekday","weekend"))
for (i in 1:length(RD$date)){
if(weekdays(as.Date(RD$date[i])) == "sabado" || weekdays(as.Date(RD$date[i])) == "domingo")
{days[i]="weekend"}
if(weekdays(as.Date(RD$date[i])) != "sabado" & weekdays(as.Date(RD$date[i])) != "domingo")
{days[i]="weekday"}
}
RDW<-data.frame(RD,days)
#Grouping data per interval of weekday end weekend
C<-1;D<-1;intervalos<-datos$interval[as.numeric(datos$date)==2]
for (i in 1:length(intervalos)){
C[i]<-mean(RDW$steps[RDW$interval==intervalos[i] & RDW$days=="weekday"])
D[i]<-mean(RDW$steps[RDW$interval==intervalos[i] & RDW$days=="weekend"])
}
par(mfrow=c(2,1))
plot(intervalos,C, main=" Figure 1: weekdays")
plot(intervalos,D, main=" Figure 2: weekend")
DD[1:20,]
data.frame(crudos[280:300,],RD[280:300],Int.mean=c(ID$mean[280:288],ID$mean[1:12]))
data.frame(crudos[280:300,],RD[280:300,],Int.mean=c(ID$mean[280:288],ID$mean[1:12]))
data.frame(crudos[280:300,1:2],RD[280:300,],Int.mean=c(ID$mean[280:288],ID$mean[1:12]))
data.frame(crudos[280:300,1,3],RD[280:300,],Int.mean=c(ID$mean[280:288],ID$mean[1:12]))
data.frame(crudos[280:300,1],RD[280:300,],Int.mean=c(ID$mean[280:288],ID$mean[1:12]))
data.frame(crudos[280:300,1&3],RD[280:300,],Int.mean=c(ID$mean[280:288],ID$mean[1:12]))
data.frame(crudos[280:300,],RD[280:300,],Int.mean=c(ID$mean[280:288],ID$mean[1:12]))
?knitr2html
?knitr2html()
?knit2html
